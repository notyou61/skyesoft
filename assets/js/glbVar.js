// üìÅ File: glbVar.js

// #region üåê Global Variable Object for Skyesoft
const glbVar = {
  // #region üïí Time & Workday Data
  timeDate: {
    now: new Date()
  },
  isHoliday: false,
  isWeekend: false,
  workdayIntervals: {
    start: "07:30", // üïî Start of workday
    end: "15:30"    // üîö End of workday
  },
  intervalRemaining: "", // ‚è≥ Text shown for remaining work interval
  // #endregion

  // #region üè∑Ô∏è Site Info
  version: "", // ‚úÖ Populated dynamically from JSON
  // #endregion

  // #region üå¶Ô∏è Weather Data
  weather: {
    temp: null,
    icon: "‚ùì",
    description: "Loading..."
  },
  // #endregion

  // #region üìä KPIs
  kpis: {
    contacts: 36,
    orders: 22,
    approvals: 3
  },
  // #endregion

  // #region üí° Tips and Quotes
  tips: [
    "Measure twice, cut once.",
    "Stay positive, work hard, make it happen.",
    "Quality is never an accident.",
    "Efficiency is doing better what is already being done.",
    "Every day is a fresh start.",
    "Take small steps every day toward big goals.",
    "Be Proactive ‚Äì Take responsibility for your actions.",
    "Begin with the End in Mind ‚Äì Define clear goals.",
    "Put First Things First ‚Äì Prioritize what matters most.",
    "Think Win-Win ‚Äì Seek mutually beneficial solutions.",
    "Seek First to Understand, Then to Be Understood ‚Äì Practice empathetic listening.",
    "Synergize ‚Äì Value teamwork and collaboration.",
    "Sharpen the Saw ‚Äì Invest in continuous personal growth."
  ]
  // #endregion
};
// #endregion

// #region üîÑ Dynamic Version Assignment
fetch("https://notyou61.github.io/skyesoft/assets/data/version.json")
  .then(res => res.json())
  .then(data => {
    if (data.version) {
      glbVar.version = data.version;
      const versionElement = document.querySelector('.version');
      if (versionElement) versionElement.textContent = data.version;
    }
  })
  .catch(err => console.error("Failed to load version:", err));
// #endregion

// #region ‚è±Ô∏è Format Duration Helper
function formatInterval(prefix, seconds) {
  const h = Math.floor(seconds / 3600);
  const m = Math.floor((seconds % 3600) / 60);
  const s = seconds % 60;
  const parts = [];

  if (h > 0) parts.push(h + "h");
  if (m > 0 || h > 0) parts.push(m.toString().padStart(2, '0') + "m");
  parts.push(s.toString().padStart(2, '0') + "s");

  return `${prefix} ${parts.join(" ")}`;
}
// #endregion

// #region üîÅ DOM Update from glbVar
function updateDOMFromGlbVar() {
  // ‚è∞ Time
  const now = glbVar.timeDate.now;
  const hours = now.getHours();
  const minutes = now.getMinutes().toString().padStart(2, '0');
  const seconds = now.getSeconds().toString().padStart(2, '0');
  const ampm = hours >= 12 ? 'PM' : 'AM';
  const standardHours = (hours % 12 || 12).toString().padStart(2, '0');
  const timeString = `${standardHours}:${minutes}:${seconds} ${ampm}`;

  const timeEl = document.getElementById("currentTime");
  if (timeEl) timeEl.textContent = timeString;

  // ‚è≥ Interval Remaining
  const intervalEl = document.getElementById("intervalRemainingData");
  if (intervalEl) intervalEl.textContent = glbVar.intervalRemaining;

  // üè∑Ô∏è Version
  const versionEl = document.querySelector(".version");
  if (versionEl) versionEl.textContent = glbVar.version;
}
// #endregion