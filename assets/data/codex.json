{
  "codexMeta": {
    "title": "üéØ Skyesoft Codex Meta",
    "version": "2025.26a",
    "lastUpdated": "2025-10-26",
    "category": "System Layer",
    "enrichment": "light",
    "description": {
      "icon": "book",
      "format": "text",
      "text": "The Codex Meta governs the format, validation, and enrichment logic for every Skyesoft module. It ensures consistency between how data is structured, interpreted, and visually rendered through the Skyesoft Report Kernel and Skyebot AI."
    },
    "schema": {
      "requiredKeys": ["title", "purpose"],
      "optionalKeys": [
        "description",
        "features",
        "workflow",
        "integrations",
        "rules",
        "examples",
        "format",
        "category",
        "version",
        "enrichment"
      ],
      "fieldTypes": {
        "title": "String with emoji prefix",
        "purpose": "Object {icon, text}",
        "description": "Object {icon, text}",
        "features": "Object {icon, items[]}",
        "workflow": "Object {icon, items[]}",
        "integrations": "Object {icon, items[]}",
        "rules": "Object {icon, items[]}",
        "examples": "Object {icon, items[]}",
        "format": "String: 'text', 'list', or 'table'",
        "enrichment": "String: 'none', 'light', 'medium', or 'heavy'"
      },
      "notes": "Every module must include 'title' and 'purpose'. The 'enrichment' property determines how aggressively AI expands the text. This schema defines the governance rules that allow Skyesoft to self-document."
    },
    "implementationNotes": {
      "icon": "gear",
      "format": "text",
      "text": "The Codex Meta itself is parsed but excluded from standard report output. It is used to validate module structure, apply enrichment rules, and maintain interoperability between AI components."
    }
  },
  "ontologySchema": {
    "title": "üß† Codex Ontology Schema",
    "category": "System Layer",
    "enrichment": "none",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Defines the universal semantic keys that describe how each Codex module relates to others, enabling AI-driven reasoning and context-aware classification without hardcoded logic."
    },
    "fields": {
      "type": {
        "definition": "Specifies what kind of conceptual object the module represents (e.g., document, process, data-stream, entity, layer).",
        "example": "document",
        "reasoningRole": "Allows Skyebot to group modules by their nature for intent routing."
      },
      "subtypes": {
        "definition": "Lists any derivative types under the main type (e.g., sheet, report, summary).",
        "example": ["sheet", "report", "summary"],
        "reasoningRole": "Enables recognition that 'sheet' and 'report' are semantically related."
      },
      "actions": {
        "definition": "Verbs or operations the module supports (e.g., generate, create, describe).",
        "example": ["generate", "create", "review"],
        "reasoningRole": "Used by the Semantic Intent Router to map user verbs to system functions."
      },
      "relationships": {
        "definition": "Describes how this module connects to others in the Codex Knowledge Graph.",
        "structure": {
          "isA": "Parent type or conceptual ancestor.",
          "partOf": "Layer or suite it belongs to.",
          "governs": "Modules governed or influenced by this one.",
          "aliases": "Alternate names or identifiers used in conversation."
        },
        "example": {
          "isA": "documentStandard",
          "partOf": "System Layer",
          "governs": ["permitManagementSuite", "financialControlSuite"],
          "aliases": ["document rules", "sheet standard"]
        },
        "reasoningRole": "Creates relational intelligence ‚Äî allows AI to infer intent even if a term or alias differs."
      }
    },
    "scalabilityNotes": {
      "icon": "gear",
      "format": "text",
      "text": "By defining these fields, Skyebot can interpret meaning directly from Codex data instead of using rigid conditionals. Future modules automatically inherit semantic awareness through consistent ontology mapping."
    }
  },
  "skyesoftOverview": {
    "title": "üìò Skyesoft Overview",
    "category": "System Layer",
    "enrichment": "medium",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Defines the mission, structure, and interconnectivity of all Skyesoft modules. It presents the big picture: how Skyesoft unifies project management, AI reasoning, and operational data into one continuous system."
    },
    "architectureLayers": {
      "icon": "puzzle",
      "format": "table",
      "items": [
        { "Layer": "Foundational", "Modules": "Time Interval Standards, Document Standards", "Purpose": "Establish temporal and visual consistency" },
        { "Layer": "Operational", "Modules": "Attendance, Permit Management", "Purpose": "Support daily workflows" },
        { "Layer": "Adaptive", "Modules": "AI Integration, SSE Stream", "Purpose": "Provide real-time context and reasoning" }
      ]
    },
    "systemVision": {
      "icon": "rocket",
      "format": "list",
      "items": [
        "Unify project and administrative data in a single schema",
        "Enable automation without loss of human oversight",
        "Make reports self-generating and audit-friendly",
        "Allow modular AI enrichment for context awareness"
      ]
    }
  },
  "skyesoftConstitution": {
    "title": "üß≠ Skyesoft Constitution",
    "category": "System Layer",
    "enrichment": "medium",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Defines the principles and logical framework that guide all Skyesoft operations. The Constitution ensures that time, structure, and intelligence are always aligned with Christy Signs‚Äô business goals."
    },
    "corePrinciples": {
      "icon": "shield",
      "format": "list",
      "items": [
        "Transparency in logic and output",
        "Consistency in structure and formatting",
        "Scalability and modularity across components",
        "Resilience via validation and auditability"
      ]
    },
    "governingFramework": {
      "icon": "puzzle",
      "format": "table",
      "items": [
        { "Layer": "Foundation", "Scope": "TIS, Document Standards", "Purpose": "Define time and design consistency" },
        { "Layer": "Core", "Scope": "Permit Management, Attendance", "Purpose": "Ensure workflow alignment" },
        { "Layer": "Adaptive", "Scope": "AI and SSE Streams", "Purpose": "Enable learning and context adaptation" }
      ]
    }
  },
  "documentStandards": {
    "title": "üìÑ Document Standards",
    "category": "System Layer",
    "type": "document",
    "subtypes": ["sheet", "report", "summary"],
    "actions": ["generate", "create", "review"],
    "relationships": {
      "isA": "systemStandard",
      "partOf": "System Layer",
      "governs": ["permitReports", "photoSurveyReports"],
      "aliases": ["document rules", "report format", "sheet layout"]
    },
    "enrichment": "medium",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Defines the formatting, layout, and branding policies that govern all Skyesoft-generated documents including reports, sheets, and correspondence."
    },
    "features": {
      "icon": "gear",
      "format": "list",
      "items": [
        "Uniform header/footer structure with metadata",
        "Automatic pagination and timestamp alignment",
        "Integrated iconography from iconMap.json",
        "Configurable spacing and typography standards"
      ]
    }
  },
  "timeIntervalStandards": {
    "title": "‚è±Ô∏è Time Interval Standards (TIS)",
    "category": "System Layer",
    "type": "temporal-standard",
    "subtypes": ["schedule", "time-interval", "work-segment"],
    "actions": ["calculate", "evaluate", "generate-sheet"],
    "relationships": {
      "isA": "systemStandard",
      "partOf": "System Layer",
      "governs": ["attendanceSuite", "permitManagementSuite"],
      "dependsOn": ["sseStream"],
      "aliases": ["TIS", "Time Standards", "Workday Schema"]
    },
    "enrichment": "medium",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Defines workday types and time segments used across scheduling, SLA validation, and AI contextual reasoning. Each day is classified as Workday, Weekend, or Holiday. Time intervals are further divided for Office and Shop environments."
    },
    "dayTypes": {
      "icon": "calendar",
      "format": "list",
      "items": ["Workday", "Weekend", "Holiday"]
    },
    "segmentsOffice": {
      "icon": "table",
      "format": "table",
      "items": [
        { "Interval": "Before Worktime", "Hours": "12:00 AM ‚Äì 7:29 AM" },
        { "Interval": "Worktime", "Hours": "7:30 AM ‚Äì 3:30 PM" },
        { "Interval": "After Worktime", "Hours": "3:31 PM ‚Äì 11:59 PM" }
      ]
    },
    "segmentsShop": {
      "icon": "table",
      "format": "table",
      "items": [
        { "Interval": "Before Worktime", "Hours": "12:00 AM ‚Äì 5:59 AM" },
        { "Interval": "Worktime", "Hours": "6:00 AM ‚Äì 2:00 PM" },
        { "Interval": "After Worktime", "Hours": "2:01 PM ‚Äì 11:59 PM" }
      ]
    },
    "holidays": {
      "icon": "calendar",
      "format": "dynamic",
      "source": "sseStream.weatherData.federalHolidaysDynamic",
      "description": "Holiday data is dynamically sourced from the SSE stream (via federalHolidays.php). Updates automatically reflect new or upcoming federal holidays."
    },
    "exclusions": {
      "icon": "shield",
      "format": "text",
      "text": "Weekends and dynamically sourced Holidays are automatically excluded from all time-sensitive calculations and scheduling routines."
    }
  },
  "fileManagement": {
    "title": "üóÇÔ∏è File Management",
    "category": "System Layer",
    "enrichment": "light",
    "purpose": {
      "icon": "folder",
      "format": "text",
      "text": "Establishes unified file handling, naming conventions, and versioning logic for all Skyesoft data structures."
    },
    "rules": {
      "icon": "shield",
      "format": "list",
      "items": [
        "Use consistent lowercase filenames with hyphens",
        "Store active data under /assets/data/",
        "Archive obsolete or legacy materials under /docs/legacy/",
        "Avoid redundancy between sheets and reports"
      ]
    }
  },
  "coreDatabaseStructure": {
    "title": "üß± Core Database Structure",
    "category": "System Layer",
    "enrichment": "medium",
    "purpose": {
      "icon": "puzzle",
      "format": "text",
      "text": "Defines how Skyesoft stores entities, locations, contacts, and relationships in JSON and database form."
    },
    "features": {
      "icon": "table",
      "format": "table",
      "items": [
        { "Entity": "companies", "Description": "Corporate records (clients, vendors, jurisdictions)" },
        { "Entity": "contacts", "Description": "Linked individuals associated with entities" },
        { "Entity": "locations", "Description": "Physical or project addresses linked to entities" },
        { "Entity": "jobs", "Description": "Active work orders and projects" }
      ]
    }
  },
  "crudUserInterfaceConvention": {
    "title": "‚öôÔ∏è CRUD User Interface Convention",
    "category": "System Layer",
    "enrichment": "medium",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Establishes the universal design and behavioral standards for all Create, Read, Update, and Delete operations within Skyesoft. Ensures that every data interaction, whether manual or AI-triggered, follows predictable and reversible logic."
    },
    "description": {
      "icon": "book",
      "format": "text",
      "text": "The CRUD Convention defines how Skyesoft modules expose editable data to users and AI agents. It governs action prompts, confirmation flows, state visualization, and data persistence across both modal and full-view contexts."
    },
    "features": {
      "icon": "gear",
      "format": "list",
      "items": [
        "Standardized four-verb model: Create, Read, Update, Delete",
        "Consistent button color and icon conventions (green = Create, blue = Read, yellow = Update, red = Delete)",
        "Automatic validation before commit, with reversible undo actions",
        "Session-linked state control synchronized with SSE Stream",
        "AI-assisted CRUD reasoning via Skyebot for context-aware edits"
      ]
    },
    "workflow": {
      "icon": "table",
      "format": "table",
      "items": [
        { "Action": "Create", "Behavior": "Opens modal for data entry; validates required fields before commit" },
        { "Action": "Read", "Behavior": "Displays record in read-only state with contextual metadata" },
        { "Action": "Update", "Behavior": "Locks record for edit; version control managed through File Management rules" },
        { "Action": "Delete", "Behavior": "Triggers confirmation and soft-delete flag; archival handled automatically" }
      ]
    },
    "integrations": {
      "icon": "link",
      "format": "list",
      "items": [
        "Dynamic Modal System (Mobile-First Modals)",
        "Core Database Structure for entity persistence",
        "Document Standards for visual alignment",
        "SSE Stream for live synchronization feedback"
      ]
    },
    "rules": {
      "icon": "shield",
      "format": "list",
      "items": [
        "All CRUD actions must route through Skyebot‚Äôs validated API endpoints",
        "Each operation logs to the System Audit Trail with timestamp and user ID",
        "Destructive actions require dual confirmation or admin override",
        "AI-generated modifications must include provenance metadata"
      ]
    },
    "examples": {
      "icon": "table",
      "format": "table",
      "items": [
        { "Module": "Permit Management Suite", "Example": "Create ‚Üí New Permit Request; Read ‚Üí Permit Status Viewer" },
        { "Module": "Attendance Suite", "Example": "Update ‚Üí Edit Time Log; Delete ‚Üí Remove Erroneous Entry" },
        { "Module": "Financial Control Suite", "Example": "Create ‚Üí New Reimbursement; Read ‚Üí Ledger Viewer" }
      ]
    }
  },
  "mobileFirstModals": {
    "title": "üì± Mobile-First Modals",
    "category": "System Layer",
    "enrichment": "light",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Describes Skyesoft‚Äôs modal-based interface logic, optimized for mobile and tablet screens. Enables quick contextual interactions without full-page reloads."
    },
    "features": {
      "icon": "gear",
      "format": "list",
      "items": [
        "Dynamic modal injection with user prompts",
        "Keyboard-friendly entry for quick tasks",
        "Adaptive width scaling for mobile browsers"
      ]
    }
  },
  "attendanceSuite": {
    "title": "üïí Attendance Suite",
    "category": "Operational Layer",
    "enrichment": "medium",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Tracks employee attendance, scheduling, and time logs integrated with Time Interval Standards and Skyebot awareness."
    },
    "workflow": {
      "icon": "table",
      "format": "table",
      "items": [
        { "Step": "Clock In/Out", "Description": "User action triggers TIS validation and record update" },
        { "Step": "Review", "Description": "Managers can review daily activity summaries" },
        { "Step": "Sync", "Description": "Data syncs automatically to skyesoft-data.json" }
      ]
    }
  },
  "permitManagementSuite": {
    "title": "üìã Permit Management Suite",
    "category": "Operational Layer",
    "enrichment": "heavy",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Automates the sign permit application, payment, and tracking process across multiple jurisdictions."
    },
    "workflow": {
      "icon": "list",
      "format": "list",
      "items": [
        "Initiate permit request with job reference and client details",
        "Submit application through jurisdictional portal",
        "Track status, expiration, and fee receipts",
        "Auto-generate permit summary report with attached receipts"
      ]
    }
  },
  "financialControlSuite": {
    "title": "üí∞ Financial Control Suite",
    "category": "Operational Layer",
    "enrichment": "light",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Handles internal reimbursements, petty cash tracking, and AR/AP reporting workflows."
    },
    "features": {
      "icon": "gear",
      "format": "list",
      "items": [
        "Reimbursement reports auto-populate from receipt uploads",
        "Mileage, petty cash, and permit fee integration",
        "PDF export aligned with Document Standards"
      ]
    }
  },
  "serviceManagementSuite": {
    "title": "üîß Service Management Suite",
    "category": "Operational Layer",
    "enrichment": "medium",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Manages field service requests, maintenance calls, and status reporting for illuminated signage and installations."
    },
    "workflow": {
      "icon": "table",
      "format": "table",
      "items": [
        { "Step": "Request Logged", "Detail": "Client or internal user submits a service ticket" },
        { "Step": "Dispatch", "Detail": "Technician assigned and notified automatically" },
        { "Step": "Completion", "Detail": "Work order updated and archived to project history" }
      ]
    }
  },
  "managementEscalationTrees": {
    "title": "üå≥ Management Escalation Trees",
    "category": "Operational Layer",
    "enrichment": "medium",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Defines decision and communication chains within Skyesoft, ensuring accountability and continuity of response."
    },
    "rules": {
      "icon": "list",
      "format": "list",
      "items": [
        "Each suite must define its own escalation logic",
        "Escalations always follow the role hierarchy first",
        "Emergency overrides are logged and timestamped"
      ]
    }
  },
  "skyebotModule": {
    "title": "ü§ñ Skyebot Module",
    "category": "Adaptive Layer",
    "enrichment": "heavy",
    "purpose": {
      "icon": "robot",
      "format": "text",
      "text": "Serves as the conversational interface of Skyesoft, interpreting user queries and triggering backend logic, reports, or document creation."
    },
    "integrations": {
      "icon": "link",
      "format": "list",
      "items": [
        "OpenAI API (askOpenAI.php)",
        "Dynamic SSE Stream for context awareness",
        "Codex-driven intent recognition"
      ]
    }
  },
  "aiIntegration": {
    "title": "üß† AI Integration",
    "category": "Adaptive Layer",
    "enrichment": "high",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Defines how Skyebot‚Ñ¢ interprets user intent through semantic analysis, real-time data fusion, and contextual recall. The AI Integration layer enables natural, context-aware interaction without reliance on rigid syntax or keyword triggers."
    },
    "architecture": {
      "icon": "diagram",
      "format": "list",
      "items": [
        "Semantic Intent Router ‚Äî the central AI engine that interprets meaning from user input, using Codex, SSE data, and Chat History.",
        "Codex Semantic Index ‚Äî provides structured metadata (titles, descriptions, tags) to ground understanding in organizational context.",
        "SSE Context Stream ‚Äî supplies real-time data (time, KPIs, weather, system state) for situational awareness.",
        "Chat History Ledger ‚Äî serves as short- and long-term memory, allowing Skyebot‚Ñ¢ to recall prior exchanges and avoid repetition.",
        "Report Kernel ‚Äî generates structured deliverables (sheets, reports, summaries) once the user‚Äôs intent is resolved."
      ]
    },
    "functionality": {
      "icon": "workflow",
      "format": "list",
      "items": [
        "Understands user intent based on phrasing, context, and conversation memory rather than keyword patterns.",
        "Recognizes semantic relationships (e.g., 'workday report' ‚Üí Time Interval Standards) through Codex indexing.",
        "Adapts tone and response depth based on task complexity and recent history.",
        "Prioritizes contextually relevant data from the SSE snapshot to keep replies temporally accurate.",
        "Automatically attaches actionable CTAs when intent resolves to a valid Codex module or report type."
      ]
    },
    "integrationPoints": {
      "icon": "link",
      "format": "list",
      "items": [
        "Codex Knowledge Graph ‚Äî semantic foundation for structured meaning and inter-module relationships.",
        "SSE Dynamic Stream ‚Äî provides continuous real-time data for contextual grounding.",
        "Chat History Architecture ‚Äî maintains chronological user interactions as an immutable reference.",
        "CRUD Engine ‚Äî executes create, read, update, and delete actions inferred through natural phrasing.",
        "Report Kernel ‚Äî materializes structured outputs aligned with Codex module specifications."
      ]
    },
    "principles": {
      "icon": "compass",
      "format": "list",
      "items": [
        "Interpret meaning over syntax ‚Äî understand what is said, not just how it‚Äôs said.",
        "Ground all reasoning in Codex and SSE data ‚Äî Skyebot‚Ñ¢ never hallucinates or assumes without a source.",
        "Use chat history for continuity ‚Äî avoid repetition and leverage prior actions.",
        "Preserve auditability ‚Äî all inferred actions and AI-driven responses remain traceable in the chat ledger.",
        "Deliver structured output when actionable, natural language when conversational."
      ]
    },
    "outcomes": {
      "icon": "star",
      "format": "list",
      "items": [
        "Natural conversation replaces command syntax.",
        "Full contextual reasoning with Codex and SSE awareness.",
        "Automated, self-grounded decision-making within organizational context.",
        "Adaptive user experience that learns and evolves per user and system state.",
        "Reduced need for manual intervention or prompt engineering."
      ]
    },
    "pipeline": {
      "icon": "flow",
      "format": "numbered",
      "items": [
        "Receive and normalize user prompt.",
        "Load live SSE + Codex context.",
        "Build semantic index of all modules and relationships.",
        "Invoke LLM Router for reasoning: infer intent, target, and confidence.",
        "Fallback to local semantic scoring if confidence < threshold.",
        "Determine whether intent is summary, report, or crud via Codex subtypes.",
        "Trigger Report Kernel or Summary Renderer accordingly.",
        "Log every semantic decision, score, and action.",
        "Respond as structured JSON or conversational text."
      ]
    },
    "updateNotes": {
      "icon": "gear",
      "format": "text",
      "text": "As of version 2025.10.20, Skyebot‚Ñ¢ accesses all reasoning data‚Äîtemporal, contextual, and doctrinal‚Äîthrough the unified SSE Stream. The AI Integration layer no longer queries separate Codex files; instead, it traverses the live stream to interpret meaning, enabling real-time semantic reasoning across dynamic and static domains."
    },
    "tags": ["semantic-router", "contextual-ai", "skyebot-core", "ai-integration", "codex-architecture"],
    "version": "2.0",
    "updated": "2025-10-14"
  },
  "sseStream": {
  "title": "üåê SSE Stream",
  "category": "Adaptive Layer",
  "type": "data-stream",
  "subtypes": ["live-feed", "system-pulse", "context-stream"],
  "actions": ["observe", "generate-sheet", "sync", "describe"],
  "relationships": {
    "isA": "adaptiveModule",
    "partOf": "Adaptive Layer",
    "governs": ["aiIntegration", "chatHistoryArchitecture"],
    "aliases": ["Server-Sent Events", "Skyesoft Stream", "SSE Feed"]
  },
  "enrichment": "light",
  "purpose": {
    "icon": "target",
    "format": "text",
    "text": "Provides real-time state data including time, weather, and system status. Acts as the live operational pulse of the Skyesoft system."
  },
  "tiers": [
    {
      "name": "live-feed",
      "interval": "1s",
      "members": ["timeDateArray", "intervalsArray", "recordCounts", "kpiData"]
    },
    {
      "name": "system-pulse",
      "interval": "5s",
      "members": ["siteMeta", "deploymentCheck"]
    },
    {
      "name": "context-stream",
      "interval": "10s",
      "members": ["weatherData", "codex", "announcements"]
    }
  ],
  "examples": {
    "icon": "table",
    "format": "table",
    "items": [
      { "Stream": "timeDateArray", "Purpose": "Real-time work interval tracking" },
      { "Stream": "weatherData", "Purpose": "Dynamic weather injection for context" },
      { "Stream": "siteMeta", "Purpose": "Deployment and Netlify sync data" }
    ]
  },
  "integrationNotes": {
    "icon": "link",
    "format": "text",
    "text": "The SSE Stream now subsumes the Skyesoft Codex as a live data object. This unification makes the stream the single source of truth for both operational telemetry and organizational logic. All semantic resolution, including Codex module discovery, now occurs directly within the SSE context without secondary loaders."
  }
  },
  "ragFramework": {
    "title": "üìö RAG Framework",
    "category": "Adaptive Layer",
    "enrichment": "medium",
    "purpose": {
      "icon": "book",
      "format": "text",
      "text": "Defines Skyesoft‚Äôs Retrieval-Augmented Generation layer, connecting Codex content, archived reports, and live data into a reasoning network."
    },
    "features": {
      "icon": "gear",
      "format": "list",
      "items": [
        "Codex-aware retrieval queries",
        "Cross-reference between modules and SSE streams",
        "Context summarization for AI agents"
      ]
    },
    "integrationPoints": {
      "icon": "link",
      "format": "list",
      "items": [
        "semanticResponder",
        "codex",
        "sseStream"
      ]
    }
  },
  "semanticResponder": {
    "title": "üß≠ Semantic Responder",
    "category": "Adaptive Layer",
    "enrichment": "medium",
    "description": "Defines Skyebot‚Äôs core reasoning system ‚Äî interpreting natural language semantically to match user intent to Codex modules, SSE data, and CRUD operations without strict keyword dependence.",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Defines Skyebot‚Äôs core reasoning system ‚Äî interpreting natural language semantically to match user intent to Codex modules, SSE data, and CRUD operations without strict keyword dependence."
    },
    "architecture": {
      "icon": "diagram",
      "format": "list",
      "items": [
        "Receives user input and contextual data from the SSE stream.",
        "Builds a semantic index from Codex modules (titles, purposes, actions, subtypes, aliases).",
        "Invokes the LLM Router to infer {intent, target, confidence} from natural language.",
        "If confidence is low, performs token-based semantic fallback (no regex).",
        "Determines intent type (summary, report, crud, general) using Codex actions and subtypes.",
        "Routes intent to execution layer: text summarizer, report generator, or CRUD engine.",
        "Logs all reasoning decisions and results for traceability.",
        "Maintains full alignment with the AI Integration and RAG Framework layers."
      ]
    },
    "principles": {
      "icon": "compass",
      "format": "list",
      "items": [
        "Interpret meaning over syntax ‚Äî understand what is said, not just how it‚Äôs said.",
        "Use Codex and SSE data as the only sources of truth.",
        "Leverage LLM reasoning to enrich semantic inference while remaining grounded.",
        "Prefer structure when intent is actionable, conversation when exploratory.",
        "Ensure all reasoning is auditable via the Chat History Architecture."
      ]
    },
    "outcomes": {
      "icon": "star",
      "format": "list",
      "items": [
        "Skyebot distinguishes between descriptive and actionable requests.",
        "Regex-free natural understanding of user language.",
        "Unified decision-making between Codex, SSE, and LLM reasoning layers.",
        "Consistent audit logs and confidence scoring for every interpretation."
      ]
    },
    "integrationRevision": {
      "icon": "compass",
      "format": "text",
      "text": "Semantic Responder now treats the SSE Stream as a total semantic field. Every key‚ÄîtimeDateArray, weatherData, codexMeta, or module definition‚Äîis discoverable through the same resolver function. This removes hardcoded category checks and enforces DRY semantic inference across all live data."
    }
  },
  "chatHistoryArchitecture": {
    "title": "üíæ Chat History Architecture",
    "category": "System Layer",
    "enrichment": "high",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Defines how Skyebot‚Ñ¢ records, recalls, and reasons from prior exchanges. Each message or action is stored as an immutable, timestamped ledger entry, enabling Skyebot to maintain continuity, avoid redundancy, and extrapolate intent based on historical context."
    },
    "structure": {
      "icon": "table",
      "format": "table",
      "items": [
        { "Field": "messageId", "Type": "String", "Description": "Composite of session start time (UNIX) + increment (e.g., 1739432447_4)" },
        { "Field": "timestamp", "Type": "Integer", "Description": "UNIX time of event for fast sorting and cross-reference" },
        { "Field": "userId", "Type": "Integer", "Description": "Identifies the actor; 0 = Skyebot‚Ñ¢, >0 = Human user, -1 = Anonymous" },
        { "Field": "message", "Type": "String", "Description": "User input or Skyebot response text" },
        { "Field": "attachments", "Type": "Array", "Description": "Optional list of attached file objects or paths" },
        { "Field": "metadata", "Type": "Object", "Description": "Includes IP address, CRUD action key, project, target, and system tags" },
        { "Field": "index", "Type": "Object", "Description": "Lightweight subset for fast lookups by action, target, or project" }
      ]
    },
    "metadataModel": {
      "icon": "gear",
      "format": "list",
      "items": [
        "IP address recorded for traceability and audit",
        "CRUD action logged from actions.json reference table",
        "System actions such as login and session start treated as Create-type events",
        "Indexed metadata enables Skyebot to recall and compare recent actions (e.g., detect if an email or report has already been sent)"
      ]
    },
    "integrationPoints": {
      "icon": "link",
      "format": "list",
      "items": [
        "CRUD User Interface Convention ‚Äî aligns user actions with audit trail entries",
        "File Management ‚Äî manages persistence under /api/data/chat_history/",
        "Skyebot Module ‚Äî appends and analyzes events for recall and continuity",
        "Action Recall & Extrapolation ‚Äî prevents redundant execution and allows intelligent inference of follow-up tasks"
      ]
    },
    "principles": {
      "icon": "shield",
      "format": "list",
      "items": [
        "Append-only structure for audit integrity",
        "Human-readable JSON with atomic writes",
        "Chronological order preserved via UNIX timestamps",
        "Session files indexed monthly for scalability",
        "Short-term context used for reasoning; long-term ledger retained for analytics and provenance"
      ]
    },
    "extrapolationLogic": {
      "icon": "brain",
      "format": "list",
      "items": [
        "Skyebot queries recent history before executing Create actions to prevent duplication (e.g., repeated emails or reports)",
        "Pattern matching based on metadata.target and metadata.project identifies related prior actions",
        "Temporal cutoff (default 24 hours) used to define 'recent' actions for recall",
        "When ambiguity is detected, Skyebot prompts with options instead of acting blindly"
      ]
    },
    "example": {
      "icon": "code",
      "format": "text",
      "text": "{\n  \"messageId\": \"1739432447_4\",\n  \"timestamp\": 1739432489,\n  \"userId\": 1,\n  \"message\": \"Send zoning report to Paula.\",\n  \"attachments\": [],\n  \"metadata\": {\n    \"ip\": \"73.10.24.120\",\n    \"action\": \"create_email\",\n    \"crud\": \"C\",\n    \"target\": \"Paula Leonard\",\n    \"project\": \"Mesa Zoning\"\n  },\n  \"index\": { \"action\": \"create_email\", \"target\": \"Paula Leonard\", \"project\": \"Mesa Zoning\" }\n}"
    }
  },
  "codeManagement": {
  "title": "üíª Code Management",
  "category": "System Layer",
  "type": "system-standard",
  "subtypes": ["source", "module", "endpoint"],
  "actions": ["read", "describe", "suggest-edit", "generate-docs"],
  "relationships": {
    "isA": "systemStandard",
    "partOf": "System Layer",
    "dependsOn": ["fileManagement"],
    "governs": ["getCodeFile", "generateReports", "federalHolidays", "getDynamicData"],
    "aliases": ["code index", "developer layer", "Skyebot coding interface"]
  },
  "enrichment": "medium",
  "purpose": {
    "icon": "target",
    "format": "text",
    "text": "Defines how Skyebot‚Ñ¢ interacts with Skyesoft‚Äôs source files ‚Äî allowing safe read-only inspection, structured documentation, and controlled modification suggestions. It ensures AI access remains auditable, non-destructive, and version-controlled."
  },
  "features": {
    "icon": "gear",
    "format": "list",
    "items": [
      "Central code manifest with file paths and descriptions",
      "Read-only inspection by default with diff-based editing proposals",
      "Integration with version control for commit history awareness",
      "AI documentation generator aligned with Codex formatting"
    ]
  },
  "integrations": {
    "icon": "link",
    "format": "list",
    "items": [
      "File Management ‚Äî ensures path integrity and backup safety",
      "SSE Stream ‚Äî provides live deployment sync metadata",
      "AI Integration ‚Äî enables semantic file comprehension and code commentary",
      "Chat History Architecture ‚Äî logs all code interactions for auditability"
    ]
  },
  "rules": {
    "icon": "shield",
    "format": "list",
    "items": [
      "Skyebot may read any file under /api, /assets, or /scripts but never /config or private credentials.",
      "All modifications must be confirmed by a human before commit.",
      "Changes are stored as diffs under /docs/changes/ for traceability.",
      "Each access is logged with timestamp, file, and user ID."
    ]
  },
  "examples": {
    "icon": "table",
    "format": "table",
    "items": [
      { "File": "api/getDynamicData.php", "Purpose": "Generates the Skyesoft SSE stream" },
      { "File": "api/federalHolidays.php", "Purpose": "Returns normalized holiday data" },
      { "File": "api/generateReports.php", "Purpose": "Creates PDF/HTML information sheets" }
    ]
  }
  },
  "modules": {
    "skyesoftGlossary": {
      "title": "üìò Skyesoft Glossary",
      "category": "System Layer",
      "description": "Defines internal shorthand and operational slang used across Skyesoft projects, emphasizing clarity, rhythm, and efficiency in team communication.",
      "purpose": {
        "icon": "book",
        "format": "text",
        "text": "To unify Skyesoft‚Äôs internal terminology ‚Äî blending technical accuracy with cultural rhythm ‚Äî so that AI, developers, and staff speak the same language."
      },
      "data": {
        "icon": "sparkle",
        "format": "table",
        "content": {
          "SNPS": "Salt N' Pepa Style ‚Äî Save it, commit it, push it ‚Äî clean and confident. The rhythm of progress. üíæ‚û°Ô∏èüöÄ",
          "AIW": "All-In-Wonder ‚Äî a one-cut command that moves, renames, and runs. Fast hands, no hesitation. ‚ö°",
          "TC": "Terminal Command ‚Äî raw execution from the shell. You type, it happens. üîß",
          "TCL": "Terminal Command Line ‚Äî the full chain, from setup to commit, meant to flow as one move. ‚õìÔ∏è",
          "LGBAS": "Let's Go Back A Step ‚Äî the tactical rewind. Step back, recalibrate, then hit again. üîÅ",
          "MTCO": "Measure Twice, Cut Once ‚Äî the precision creed. Think deep, act once. üéØ",
          "SOT": "Source of Truth ‚Äî the file of record, the clean state. All flows return here. üìú",
          "SSE": "Server-Sent Events ‚Äî the pulse of the system. Time, weather, KPIs, all alive. üåê",
          "Codex": "The master playbook ‚Äî Skyesoft‚Äôs internal library of logic, rhythm, and reason. üìö",
          "PushIt": "Execute the cycle ‚Äî save, commit, push, verify. A clean push is the heartbeat of progress. ‚ù§Ô∏è"
        }
      },
      "features": {
        "icon": "list",
        "format": "auto",
        "source": "data.content"
      }
    }
  },
  "apiMap": {
    "base": "https://www.skyelighting.com/skyesoft",
    "openai": "https://api.openai.com/v1",
    "openWeather": "https://api.openweathermap.org/data/2.5"
  },
  "kpiData": {
    "secondsPerDay": 86400,
    "daysPerYearBase": 365,
    "morningEndHour": 12,
    "afternoonEndHour": 17,
    "defaultTimeout": 10,
    "openaiMaxTokens": 1500,
    "httpOk": 200,
    "minConfidence": 70,
    "cacheTtlSeconds": 300,
    "pdfMargins": {
      "header": 80,
      "body": 50,
      "footer": 25
    }
  }
}