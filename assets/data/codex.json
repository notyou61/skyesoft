{
  "codexMeta": {
    "title": "üéØ Skyesoft Codex Meta",
    "version": "v5.5.1",
    "build": "2025.26b",
    "lastUpdated": "2025-10-30",
    "ratifiedBy": "CPAP-01 (Parliamentarian)",
    "category": "System Layer",
    "enrichment": "light",
    "description": {
      "icon": "book",
      "format": "text",
      "text": "The Codex Meta governs the format, validation, and enrichment logic for every Skyesoft module. Version 5.5.1 implements the Containment Clause, enabling hierarchical 'containedModules' under governing doctrines."
    },
    "schema": {
      "requiredKeys": ["title", "purpose"],
      "optionalKeys": [
        "description",
        "features",
        "workflow",
        "integrations",
        "rules",
        "examples",
        "format",
        "category",
        "version",
        "enrichment"
      ],
      "fieldTypes": {
        "title": "String with emoji prefix",
        "purpose": "Object {icon, text}",
        "description": "Object {icon, text}",
        "features": "Object {icon, items[]}",
        "workflow": "Object {icon, items[]}",
        "integrations": "Object {icon, items[]}",
        "rules": "Object {icon, items[]}",
        "examples": "Object {icon, items[]}",
        "format": "String: 'text', 'list', or 'table'",
        "enrichment": "String: 'none', 'light', 'medium', or 'heavy'"
      },
      "notes": "Every module must include 'title' and 'purpose'. The 'enrichment' property determines AI expansion depth. As of v5.5.1, containment and amendment types are formally recognized within the Codex schema."
    },
    "implementationNotes": {
      "icon": "gear",
      "format": "text",
      "text": "The Codex Meta is parsed but excluded from standard report output. It validates structure, applies enrichment rules, and enforces doctrinal integrity for all modules. Ratified under the Containment Clause (V-5.5.0)."
    }
  },
  "ontologySchema": {
    "title": "üß† Codex Ontology Schema",
    "category": "System Layer",
    "version": "5.5.1",
    "enrichment": "none",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Defines the universal semantic keys that describe how each Codex module relates to others, enabling AI-driven reasoning, versioned amendments, and context-aware classification without hardcoded logic."
    },
    "fields": {
      "type": {
        "definition": {
          "document": "Represents a structured data or narrative record such as a report, sheet, or summary.",
          "standard": "Defines a doctrine or system-level rule that governs subordinate modules.",
          "taxonomy": "Classifies and organizes related families of modules under a governing standard.",
          "specification": "Details the format, structure, and expected behavior of a specific report, sheet, or survey.",
          "suite": "Groups multiple related modules or subsystems under a shared purpose or process.",
          "entity": "Defines a discrete organizational unit, contact, or jurisdiction recognized by the system.",
          "process": "Represents an operational or procedural function (e.g., validation, routing, calculation).",
          "data-stream": "Describes a dynamic feed or live source of data such as an SSE endpoint.",
          "registry": "Acts as a ledger for tracking amendments, policies, or other high-level governance data.",
          "amendment": "Represents a formal rule change, correction, or extension to an existing Codex doctrine."
        },
        "example": "document",
        "reasoningRole": "Allows Skyebot to group and interpret modules by conceptual nature for CRUD and intent routing."
      },
      "subtypes": {
        "definition": "Lists any derivative types under the main type (e.g., sheet, report, summary).",
        "example": ["sheet", "report", "summary"],
        "reasoningRole": "Enables recognition that derivative formats such as 'sheet' and 'report' share semantic lineage."
      },
      "actions": {
        "definition": "Verbs or operations the module supports (e.g., generate, create, review).",
        "example": ["generate", "create", "review"],
        "reasoningRole": "Used by the Semantic Intent Router to map user verbs to system functions during CRUD operations."
      },
      "relationships": {
        "definition": "Describes how this module connects to others in the Codex Knowledge Graph.",
        "structure": {
          "isA": "Parent type or conceptual ancestor.",
          "partOf": "Layer, suite, or domain it belongs to.",
          "governs": "Modules governed or influenced by this one.",
          "dependsOn": "Modules this one requires or references.",
          "isSubordinateTo": "Indicates hierarchical dependency under another doctrine.",
          "containedModules": "Introduced by Amendment V-5.5.0 ‚Äî allows direct containment of submodules inside a governing object.",
          "aliases": "Alternate names or identifiers used in conversation."
        },
        "example": {
          "isA": "documentStandard",
          "partOf": "System Layer",
          "governs": ["permitManagementSuite", "financialControlSuite"],
          "aliases": ["document rules", "sheet standard"]
        },
        "reasoningRole": "Creates relational intelligence ‚Äî enabling Skyebot to infer intent and hierarchy even when terminology varies."
      }
    },
    "temporalOntology": {
      "title": "‚è≥ Temporal Ontology",
      "category": "Time and Duration Mapping",
      "version": "1.0",
      "description": "Defines how Skyebot‚Ñ¢ interprets and calculates time-based relationships across all modules using Codex data rather than hardcoded PHP logic.",
      "mappings": {
        "universalTemporalFields": [
          "createdAt",
          "updatedAt",
          "submittedDate",
          "approvedDate",
          "completedDate",
          "lastModified",
          "archivedAt"
        ],
        "permitManagementSuite": [
          "submittedDate",
          "reviewStartDate",
          "approvedDate",
          "finalInspectionDate"
        ],
        "financeSuite": [
          "invoiceDate",
          "paymentDate",
          "dueDate"
        ],
        "crmSuite": [
          "contactCreated",
          "lastInteraction"
        ]
      },
      "notes": "Allows Skyebot to perform temporal reasoning (e.g., 'days since approval', 'time until payment due') without any PHP logic changes."
    },
    "scalabilityNotes": {
      "icon": "gear",
      "format": "text",
      "text": "By defining these fields, Skyebot can interpret meaning directly from Codex data instead of rigid conditionals. Registry and amendment types are now semantically recognized (per v5.5.1 Containment Clause), ensuring automatic inheritance and reasoning consistency."
    }
  },
  "skyesoftOverview": {
    "title": "üìò Skyesoft Overview",
    "category": "System Layer",
    "enrichment": "medium",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Defines the mission, structure, and interconnectivity of all Skyesoft modules. It presents the big picture: how Skyesoft unifies project management, AI reasoning, and operational data into one continuous system."
    },
    "architectureLayers": {
      "icon": "puzzle",
      "format": "table",
      "items": [
        { "Layer": "Foundational", "Modules": "Time Interval Standards, Document Standards", "Purpose": "Establish temporal and visual consistency" },
        { "Layer": "Operational", "Modules": "Attendance, Permit Management", "Purpose": "Support daily workflows" },
        { "Layer": "Adaptive", "Modules": "AI Integration, SSE Stream", "Purpose": "Provide real-time context and reasoning" }
      ]
    },
    "systemVision": {
      "icon": "rocket",
      "format": "list",
      "items": [
        "Unify project and administrative data in a single schema",
        "Enable automation without loss of human oversight",
        "Make reports self-generating and audit-friendly",
        "Allow modular AI enrichment for context awareness"
      ]
    }
  },
  "skyesoftConstitution": {
    "title": "üß≠ Skyesoft Constitution",
    "category": "System Layer",
    "enrichment": "medium",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Defines the principles and logical framework that guide all Skyesoft operations. The Constitution ensures that time, structure, and intelligence are always aligned with Christy Signs‚Äô business goals."
    },
    "corePrinciples": {
      "icon": "shield",
      "format": "list",
      "items": [
        "Transparency in logic and output",
        "Consistency in structure and formatting",
        "Scalability and modularity across components",
        "Resilience via validation and auditability"
      ]
    },
    "governingFramework": {
      "icon": "puzzle",
      "format": "table",
      "items": [
        { "Layer": "Foundation", "Scope": "TIS, Document Standards", "Purpose": "Define time and design consistency" },
        { "Layer": "Core", "Scope": "Permit Management, Attendance", "Purpose": "Ensure workflow alignment" },
        { "Layer": "Adaptive", "Scope": "AI and SSE Streams", "Purpose": "Enable learning and context adaptation" }
      ]
    }
  },
  "documentStandards": {
    "title": "üìÑ Document Standards",
    "category": "System Layer",
    "type": "standard",
    "tier": 1,
    "hierarchyOrder": "A",
    "governs": ["documentTypes"],
    "dependsOn": ["skyesoftConstitution"],
    "purpose": {
      "text": "Defines structure, layout, and branding policies governing all Skyesoft documents."
    }
  },
  "documentTypes": {
    "title": "üßæ Document Types",
    "category": "System Layer",
    "type": "taxonomy",
    "tier": 2,
    "hierarchyOrder": "1",
    "isSubordinateTo": ["documentStandards"],
    "governs": ["temporalIntegritySpec", "permitReportSpec", "photoSurveySpec"],
    "purpose": {
      "text": "Maintains document family classifications under the Document Standards doctrine."
    }
  },
  "temporalIntegritySpec": {
    "title": "üï∞Ô∏è Temporal Integrity Report Specification",
    "category": "System Layer",
    "type": "specification",
    "family": "report",
    "tier": 3,
    "hierarchyOrder": "a",
    "isSubordinateTo": ["documentTypes"],
    "purpose": {
      "text": "Defines how the Temporal Integrity Report is structured and validated."
    }
  },
  "permitReportSpec": {
    "title": "üèõÔ∏è Permit Report Specification",
    "category": "Operations",
    "type": "specification",
    "family": "report",
    "tier": 3,
    "hierarchyOrder": "a",
    "isSubordinateTo": ["documentTypes"],
    "purpose": {
      "text": "Defines format and fields for permit-related reports."
    }
  },
  "photoSurveySpec": {
    "title": "üì∑ Photo Survey Specification",
    "category": "Operations",
    "type": "specification",
    "family": "survey",
    "tier": 3,
    "hierarchyOrder": "a",
    "isSubordinateTo": ["documentTypes"],
    "purpose": {
      "text": "Defines the standardized format for photo survey reports."
    }
  },
  "timeIntervalStandards": {
    "title": "‚è±Ô∏è Time Interval Standards (TIS)",
    "category": "System Layer",
    "type": "temporal-standard",
    "subtypes": ["schedule", "time-interval", "work-segment"],
    "actions": ["calculate", "evaluate", "generate-sheet"],
    "relationships": {
      "isA": "systemStandard",
      "partOf": "System Layer",
      "governs": ["attendanceSuite", "permitManagementSuite"],
      "dependsOn": ["sseStream"],
      "aliases": ["TIS", "Time Standards", "Workday Schema"]
    },
    "enrichment": "medium",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Defines workday types and time segments used across scheduling, SLA validation, and AI contextual reasoning. Each day is classified as Workday, Weekend, or Holiday. Time intervals are further divided for Office and Shop environments."
    },
    "dayTypes": {
      "icon": "calendar",
      "format": "list",
      "items": ["Workday", "Weekend", "Holiday"]
    },
    "segmentsOffice": {
      "icon": "table",
      "format": "table",
      "items": [
        { "Interval": "Before Worktime", "Hours": "12:00 AM ‚Äì 7:29 AM" },
        { "Interval": "Worktime", "Hours": "7:30 AM ‚Äì 3:30 PM" },
        { "Interval": "After Worktime", "Hours": "3:31 PM ‚Äì 11:59 PM" }
      ]
    },
    "segmentsShop": {
      "icon": "table",
      "format": "table",
      "items": [
        { "Interval": "Before Worktime", "Hours": "12:00 AM ‚Äì 5:59 AM" },
        { "Interval": "Worktime", "Hours": "6:00 AM ‚Äì 2:00 PM" },
        { "Interval": "After Worktime", "Hours": "2:01 PM ‚Äì 11:59 PM" }
      ]
    },
    "holidays": {
      "icon": "calendar",
      "format": "dynamic",
      "source": "sseStream.weatherData.federalHolidaysDynamic",
      "description": "Holiday data is dynamically sourced from the SSE stream (via federalHolidays.php). Updates automatically reflect new or upcoming federal holidays.",
      "governs": ["companyHolidaysEngine", "getDynamicData", "holidayRecognition"]
    },
    "exclusions": {
      "icon": "shield",
      "format": "text",
      "text": "Weekends and recognized Company Holidays are automatically excluded from all time-sensitive calculations and scheduling routines. Federal holidays are excluded only when they coincide with official company closures as defined in the holidayRegistry."
    },
    "holidayRegistry": {
      "icon": "calendar",
      "format": "table",
      "description": "Unified registry of holidays recognized by Skyesoft, including federal, company, cultural, awareness, and novelty observances. Used by the Time Interval Standards to identify non-working or special-context days.",
      "source": "Codex internal list (static registry; supersedes federalHolidays.php)",
      "revision": {
        "version": "1.1",
        "lastUpdated": "2025-10-28",
        "author": "System Codex Enrichment",
        "notes": "Upgraded to multi-category holiday model; holidays may belong to several observance groups."
      },
      "categories": {
        "federal": {
          "description": "Official U.S. government holidays that may influence permit offices, shipping, and municipal operations.",
          "workdayImpact": "high",
          "excludeFromScheduling": true
        },
        "company": {
          "description": "Days when Christy Signs offices are closed or operating on limited hours.",
          "workdayImpact": "critical",
          "excludeFromScheduling": true
        },
        "cultural": {
          "description": "Widespread cultural observances that may affect communications, marketing tone, or social relevance but do not close operations.",
          "workdayImpact": "moderate",
          "excludeFromScheduling": false
        },
        "awareness": {
          "description": "Global or national awareness days recognized in reporting or AI contextual reasoning (e.g., Earth Day).",
          "workdayImpact": "low",
          "excludeFromScheduling": false
        },
        "novelty": {
          "description": "Light-hearted or social media observances used for engagement or contextual commentary (e.g., National Donut Day).",
          "workdayImpact": "minimal",
          "excludeFromScheduling": false
        },
        "notes": "A holiday may list multiple categories; logic interprets inclusion by intersection."
      },
      "holidays": [
        { "name": "New Year's Day", "rule": "Jan 1", "categories": ["federal", "company"] },
        { "name": "Martin Luther King Jr. Day", "rule": "Third Monday of Jan", "categories": ["federal"] },
        { "name": "Presidents' Day", "rule": "Third Monday of Feb", "categories": ["federal"] },
        { "name": "Memorial Day", "rule": "Last Monday of May", "categories": ["federal", "company"] },
        { "name": "Juneteenth", "rule": "Jun 19", "categories": ["federal"] },
        { "name": "Independence Day", "rule": "Jul 4", "categories": ["federal", "company"] },
        { "name": "Labor Day", "rule": "First Monday of Sep", "categories": ["federal", "company"] },
        { "name": "Veterans Day", "rule": "Nov 11", "categories": ["federal"] },
        { "name": "Thanksgiving Day", "rule": "Fourth Thursday of Nov", "categories": ["federal", "company"] },
        { "name": "Day After Thanksgiving", "rule": "Fourth Friday of Nov", "categories": ["company"] },
        { "name": "Christmas Eve", "rule": "Dec 24", "categories": ["cultural"] },
        { "name": "Christmas Day", "rule": "Dec 25", "categories": ["federal", "company"] },
        { "name": "New Year's Eve", "rule": "Dec 31", "categories": ["cultural"] },
        { "name": "Cinco de Mayo", "rule": "May 5", "categories": ["cultural"] },
        { "name": "Mother's Day", "rule": "Second Sunday of May", "categories": ["cultural"] },
        { "name": "Father's Day", "rule": "Third Sunday of June", "categories": ["cultural"] },
        { "name": "Halloween", "rule": "Oct 31", "categories": ["cultural"] },
        { "name": "Earth Day", "rule": "Apr 22", "categories": ["awareness"] },
        { "name": "Patriot Day", "rule": "Sep 11", "categories": ["awareness"] },
        { "name": "Pi Day", "rule": "Mar 14", "categories": ["novelty"] },
        { "name": "Star Wars Day", "rule": "May 4", "categories": ["novelty"] },
        { "name": "National Donut Day", "rule": "First Friday of Jun", "categories": ["novelty"] },
        { "name": "Talk Like a Pirate Day", "rule": "Sep 19", "categories": ["novelty"] },
        { "name": "National Coffee Day", "rule": "Sep 29", "categories": ["novelty"] }
      ]
    },
    "holidayFallbackRules": {
      "icon": "gear",
      "format": "object",
      "description": "Resolves temporal gaps after the last holiday of a calendar year or before the first holiday of a new year.",
      "rules": {
        "after_last_holiday": {
          "strategy": "next_year_rollover",
          "fallback_method": "lookup_first_holiday_next_year",
          "reasoning": "When no upcoming holiday exists in the current year, Skyebot automatically fetches the first recognized holiday from the next year using Codex holidayRegistry."
        },
        "before_first_holiday": {
          "strategy": "previous_year_anchor",
          "fallback_method": "lookup_last_holiday_prev_year",
          "reasoning": "When reasoning backward before the first holiday of a year, Skyebot anchors to the prior year's final recognized holiday."
        }
      }
    },
    "meta": {
      "introducedInVersion": "v5.3.9",
      "maintainedBy": "Temporal Doctrine Suite",
      "notes": "Ensures continuous holiday mapping across year boundaries; tested under stress suite v3.6."
    }
  },
  "codexAmendments": {
  "title": "üìú Codex Amendments Register",
  "category": "System Layer",
  "type": "registry",
  "purpose": {
    "icon": "target",
    "format": "text",
    "text": "Maintains all ratified Skyesoft‚Ñ¢ doctrinal amendments enacted by the Parliamentarian and Codex Council. Each amendment modifies or extends existing system doctrine."
  },
  "amendments": {
    "V550": {
      "title": "üìú Codex Amendment V-5.5.0 ‚Äì The Containment Clause",
      "status": "ratified",
      "ratifiedOn": "2025-10-30",
      "appliesTo": ["systemStandard", "taxonomy", "governingDoctrine"],
      "summary": {
        "icon": "scale",
        "format": "text",
        "text": "Authorizes governing standards to contain subordinate doctrinal modules through the reserved key 'containedModules', thereby permitting hierarchical containment without violating Codex uniformity."
      },
      "articles": {
        "Article I ‚Äì Definition": {
          "text": "The property 'containedModules' is a sanctioned structural key in the Codex schema. It may appear only within objects of type 'standard', 'taxonomy', or other designated 'governingDoctrine' types."
        },
        "Article II ‚Äì Scope": {
          "text": "Contained modules must conform to full Codex object schema and inherit their parent‚Äôs doctrinal lineage while retaining unique identifiers."
        },
        "Article III ‚Äì Interpretation": {
          "text": "Contained modules are subordinate for hierarchy mapping yet remain accessible through the global Codex registry for cross-reference, ensuring recursive and flat access."
        },
        "Article IV ‚Äì Application": {
          "text": "All foundational doctrines‚Äîincluding Document Standards, Time Interval Standards, and Data Exchange Standards‚Äîshall adopt 'containedModules' for direct subordination. Non-governing objects continue to use relational keys such as 'isSubordinateTo' or 'dependsOn'."
        },
        "Article V ‚Äì Transitional Provisions": {
          "text": "Legacy keys ('submodules', 'tier', 'hierarchyOrder') will be migrated to 'containedModules' by Codex v5.6 while preserving backward compatibility."
        }
      },
      "signatories": [
        {"name": "CPAP-01 (Parliamentarian)", "authority": "Codex Procedural Arbiter"},
        {"name": "Skyebot System Layer", "authority": "Ratification Executor"},
        {"name": "Christy Signs Governance Council", "authority": "Corporate Oversight Body"}
      ],
      "meta": {
        "introducedInVersion": "v5.5.0",
        "effectiveVersion": "v5.5.1",
        "revisionHistory": [
          {"version": "Draft v5.5.0-RC1", "notes": "Initial definition of containment concept"},
          {"version": "Ratified v5.5.0", "notes": "Final approval by Parliamentarian CPAP-01"}
        ]
      }
    }
  }
  },
  "fileManagement": {
    "title": "üóÇÔ∏è File Management",
    "category": "System Layer",
    "enrichment": "light",
    "purpose": {
      "icon": "folder",
      "format": "text",
      "text": "Establishes unified file handling, naming conventions, and versioning logic for all Skyesoft data structures."
    },
    "rules": {
      "icon": "shield",
      "format": "list",
      "items": [
        "Use consistent lowercase filenames with hyphens",
        "Store active data under /assets/data/",
        "Archive obsolete or legacy materials under /docs/legacy/",
        "Avoid redundancy between sheets and reports"
      ]
    }
  },
  "coreDatabaseStructure": {
    "title": "üß± Core Database Structure",
    "category": "System Layer",
    "enrichment": "medium",
    "purpose": {
      "icon": "puzzle",
      "format": "text",
      "text": "Defines how Skyesoft stores entities, locations, contacts, and relationships in JSON and database form."
    },
    "features": {
      "icon": "table",
      "format": "table",
      "items": [
        { "Entity": "companies", "Description": "Corporate records (clients, vendors, jurisdictions)" },
        { "Entity": "contacts", "Description": "Linked individuals associated with entities" },
        { "Entity": "locations", "Description": "Physical or project addresses linked to entities" },
        { "Entity": "jobs", "Description": "Active work orders and projects" }
      ]
    }
  },
  "crudUserInterfaceConvention": {
    "title": "‚öôÔ∏è CRUD User Interface Convention",
    "category": "System Layer",
    "enrichment": "medium",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Establishes the universal design and behavioral standards for all Create, Read, Update, and Delete operations within Skyesoft. Ensures that every data interaction, whether manual or AI-triggered, follows predictable and reversible logic."
    },
    "description": {
      "icon": "book",
      "format": "text",
      "text": "The CRUD Convention defines how Skyesoft modules expose editable data to users and AI agents. It governs action prompts, confirmation flows, state visualization, and data persistence across both modal and full-view contexts."
    },
    "features": {
      "icon": "gear",
      "format": "list",
      "items": [
        "Standardized four-verb model: Create, Read, Update, Delete",
        "Consistent button color and icon conventions (green = Create, blue = Read, yellow = Update, red = Delete)",
        "Automatic validation before commit, with reversible undo actions",
        "Session-linked state control synchronized with SSE Stream",
        "AI-assisted CRUD reasoning via Skyebot for context-aware edits"
      ]
    },
    "workflow": {
      "icon": "table",
      "format": "table",
      "items": [
        { "Action": "Create", "Behavior": "Opens modal for data entry; validates required fields before commit" },
        { "Action": "Read", "Behavior": "Displays record in read-only state with contextual metadata" },
        { "Action": "Update", "Behavior": "Locks record for edit; version control managed through File Management rules" },
        { "Action": "Delete", "Behavior": "Triggers confirmation and soft-delete flag; archival handled automatically" }
      ]
    },
    "integrations": {
      "icon": "link",
      "format": "list",
      "items": [
        "Dynamic Modal System (Mobile-First Modals)",
        "Core Database Structure for entity persistence",
        "Document Standards for visual alignment",
        "SSE Stream for live synchronization feedback"
      ]
    },
    "rules": {
      "icon": "shield",
      "format": "list",
      "items": [
        "All CRUD actions must route through Skyebot‚Äôs validated API endpoints",
        "Each operation logs to the System Audit Trail with timestamp and user ID",
        "Destructive actions require dual confirmation or admin override",
        "AI-generated modifications must include provenance metadata"
      ]
    },
    "examples": {
      "icon": "table",
      "format": "table",
      "items": [
        { "Module": "Permit Management Suite", "Example": "Create ‚Üí New Permit Request; Read ‚Üí Permit Status Viewer" },
        { "Module": "Attendance Suite", "Example": "Update ‚Üí Edit Time Log; Delete ‚Üí Remove Erroneous Entry" },
        { "Module": "Financial Control Suite", "Example": "Create ‚Üí New Reimbursement; Read ‚Üí Ledger Viewer" }
      ]
    }
  },
  "mobileFirstModals": {
    "title": "üì± Mobile-First Modals",
    "category": "System Layer",
    "enrichment": "light",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Describes Skyesoft‚Äôs modal-based interface logic, optimized for mobile and tablet screens. Enables quick contextual interactions without full-page reloads."
    },
    "features": {
      "icon": "gear",
      "format": "list",
      "items": [
        "Dynamic modal injection with user prompts",
        "Keyboard-friendly entry for quick tasks",
        "Adaptive width scaling for mobile browsers"
      ]
    }
  },
  "attendanceSuite": {
    "title": "üïí Attendance Suite",
    "category": "Operational Layer",
    "enrichment": "medium",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Tracks employee attendance, scheduling, and time logs integrated with Time Interval Standards and Skyebot awareness."
    },
    "workflow": {
      "icon": "table",
      "format": "table",
      "items": [
        { "Step": "Clock In/Out", "Description": "User action triggers TIS validation and record update" },
        { "Step": "Review", "Description": "Managers can review daily activity summaries" },
        { "Step": "Sync", "Description": "Data syncs automatically to skyesoft-data.json" }
      ]
    }
  },
  "permitManagementSuite": {
    "title": "üìã Permit Management Suite",
    "category": "Operational Layer",
    "enrichment": "heavy",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Automates the sign permit application, payment, and tracking process across multiple jurisdictions."
    },
    "workflow": {
      "icon": "list",
      "format": "list",
      "items": [
        "Initiate permit request with job reference and client details",
        "Submit application through jurisdictional portal",
        "Track status, expiration, and fee receipts",
        "Auto-generate permit summary report with attached receipts"
      ]
    }
  },
  "financialControlSuite": {
    "title": "üí∞ Financial Control Suite",
    "category": "Operational Layer",
    "enrichment": "light",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Handles internal reimbursements, petty cash tracking, and AR/AP reporting workflows."
    },
    "features": {
      "icon": "gear",
      "format": "list",
      "items": [
        "Reimbursement reports auto-populate from receipt uploads",
        "Mileage, petty cash, and permit fee integration",
        "PDF export aligned with Document Standards"
      ]
    }
  },
  "serviceManagementSuite": {
    "title": "üîß Service Management Suite",
    "category": "Operational Layer",
    "enrichment": "medium",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Manages field service requests, maintenance calls, and status reporting for illuminated signage and installations."
    },
    "workflow": {
      "icon": "table",
      "format": "table",
      "items": [
        { "Step": "Request Logged", "Detail": "Client or internal user submits a service ticket" },
        { "Step": "Dispatch", "Detail": "Technician assigned and notified automatically" },
        { "Step": "Completion", "Detail": "Work order updated and archived to project history" }
      ]
    }
  },
  "managementEscalationTrees": {
    "title": "üå≥ Management Escalation Trees",
    "category": "Operational Layer",
    "enrichment": "medium",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Defines decision and communication chains within Skyesoft, ensuring accountability and continuity of response."
    },
    "rules": {
      "icon": "list",
      "format": "list",
      "items": [
        "Each suite must define its own escalation logic",
        "Escalations always follow the role hierarchy first",
        "Emergency overrides are logged and timestamped"
      ]
    }
  },
  "skyebotModule": {
    "title": "ü§ñ Skyebot Module",
    "category": "Adaptive Layer",
    "enrichment": "heavy",
    "purpose": {
      "icon": "robot",
      "format": "text",
      "text": "Serves as the conversational interface of Skyesoft, interpreting user queries and triggering backend logic, reports, or document creation."
    },
    "integrations": {
      "icon": "link",
      "format": "list",
      "items": [
        "OpenAI API (askOpenAI.php)",
        "Dynamic SSE Stream for context awareness",
        "Codex-driven intent recognition"
      ]
    }
  },
  "aiIntegration": {
    "title": "üß† AI Integration",
    "category": "Adaptive Layer",
    "enrichment": "high",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Defines how Skyebot‚Ñ¢ interprets user intent through semantic analysis, real-time data fusion, and contextual recall. The AI Integration layer enables natural, context-aware interaction without rigid syntax or procedural logic."
    },
    "systemFlow": {
      "icon": "diagram",
      "format": "sections",
      "sections": {
        "architecture": [
          "Semantic Intent Router ‚Äî interprets user input using Codex, SSE data, and Chat History.",
          "Codex Semantic Index ‚Äî anchors reasoning in structured organizational context.",
          "SSE Context Stream ‚Äî supplies real-time situational awareness (time, KPIs, weather, system state).",
          "Chat History Ledger ‚Äî maintains session memory and recall continuity.",
          "Report Kernel ‚Äî generates structured deliverables once intent is resolved."
        ],
        "integrationPoints": [
          "Codex Knowledge Graph ‚Äî semantic foundation linking all modules.",
          "CRUD Engine ‚Äî executes inferred create/read/update/delete actions from natural phrasing.",
          "Report Kernel ‚Äî shared rendering component ensuring document standard alignment."
        ],
        "pipeline": [
          "Receive user prompt ‚Üí Normalize ‚Üí Load SSE + Codex context.",
          "Infer intent and confidence ‚Üí Route ‚Üí Generate structured or conversational output.",
          "Log all semantic decisions for audit and traceability."
        ]
      }
    },
    "functionality": {
      "icon": "workflow",
      "format": "list",
      "items": [
        "Understands user intent based on phrasing, context, and conversation history rather than keyword matching.",
        "Recognizes semantic relationships (e.g., 'workday report' ‚Üí Time Interval Standards) through Codex indexing.",
        "Adapts tone and depth based on task complexity and recent interactions.",
        "Prioritizes temporally relevant data from the SSE snapshot for accuracy.",
        "Attaches actionable CTAs when intent resolves to a valid Codex module or report type."
      ]
    },
    "temporalDoctrine": {
      "definition": "Defines the unified temporal reasoning framework governing duration inference, comparison, and correction across all modules.",
      "inheritsFrom": "aiIntegration.temporalReasoning",
      "includes": [
        "temporalReasoning",
        "temporalCorrectionHandling",
        "temporalGovernance",
        "temporalResolvers",
        "temporalComparators"
      ],
      "notes": "Collectively known as the Temporal Doctrine Suite (Codex Amendments CPD-03.A‚ÄìC)."
    },
    "temporalReasoning": {
      "icon": "hourglass",
      "format": "list",
      "items": [
        "Computes durations using timestamp or date fields (e.g., submittedDate, createdAt, lastUpdated).",
        "Recognizes natural queries such as 'how long ago', 'how many days', 'when was', or 'since when'.",
        "Uses timeDateArray.currentUnixTime from the SSE stream as the temporal anchor for comparisons.",
        "Adapts contextual scope: permits ‚Üí duration in review; holidays ‚Üí days until next; KPIs ‚Üí days since update.",
        "Locates relevant date fields dynamically through Codex ontology relationships, avoiding fixed code paths.",
        "Returns human-readable intervals ('3 days', '2 weeks', '5 hours') instead of numeric differences.",
        "Supports both retrospective (elapsed) and prospective (remaining) reasoning."
      ],
      "notes": "Enables Skyebot to perform duration and count reasoning without external code. All logic is data-driven via Codex ontology and SSE context."
    },
    "temporalCorrectionHandling": {
      "definition": "Interprets declarative date statements as factual corrections, not philosophical prompts.",
      "example": "User: 'Friday is 10/31/25' ‚Üí update internal reference date and re-evaluate intervals.",
      "reasoningRole": "Prevents misrouting of date assertions into non-temporal modules.",
      "feedbackBehavior": "Acknowledges corrections gracefully and updates reasoning context in memory.",
      "updateScope": "Adjusts date anchors across all active temporal modules without domain reassignment."
    },
    "temporalGovernance": {
      "icon": "scales",
      "format": "table",
      "definition": "Specifies which modules inherit duration inference from the Temporal Doctrine Suite.",
      "appliesTo": ["holidays", "permits", "tasks", "invoices", "projects", "attendance", "kpiData"],
      "reasoningRole": "Ensures all time-aware modules share consistent interval logic without duplication.",
      "notes": "Expands automatically as new modules register temporal fields (e.g., submittedDate, completedAt, dueDate)."
    },
    "temporalResolvers": {
      "icon": "infinity",
      "format": "object",
      "definition": "Declares non-procedural inference patterns that compute dynamic temporal fields (e.g., nextHoliday, daysSincePermitSubmission, hoursUntilWorkdayEnd) directly from Codex and SSE data.",
      "governance": "Extends temporalGovernance for resolver-free duration inference.",
      "examples": {
        "holidays": "Determines upcoming holiday by category (company, federal, cultural) via date comparison.",
        "permits": "Computes duration between submittedDate and currentUnixTime for status evaluation.",
        "tasks": "Calculates remaining time until dueDate for urgency ranking.",
        "kpiData": "Determines time since last KPI update for performance tracking."
      },
      "reasoningRole": "Eliminates procedural resolver files. All duration logic is declarative and Codex-driven.",
      "notes": "Codex Amendment CPD-03.A ‚Äì Elimination of Procedural Temporal Resolvers."
    },
    "temporalComparators": {
      "definition": "Defines directional temporal logic to distinguish between past and future reasoning.",
      "operators": ["before", "after", "since", "until"],
      "mapping": {
        "prospective": ["until", "in", "till", "to"],
        "retrospective": ["since", "ago", "before", "earlier"]
      },
      "binding": "The Codex Interpreter applies these comparators dynamically to any temporalResolver, determining interval polarity relative to currentUnixTime.",
      "reasoningRole": "Provides bidirectional inference capability across all governed modules."
    },
    "philosophy": {
      "icon": "compass",
      "format": "pairedList",
      "pairs": [
        {"principle": "Interpret meaning over syntax.", "outcome": "Natural conversation replaces command syntax."},
        {"principle": "Ground reasoning in Codex and SSE data.", "outcome": "No assumptions without verifiable source context."},
        {"principle": "Use chat history for continuity.", "outcome": "Maintains memory integrity and contextual awareness."},
        {"principle": "Preserve auditability.", "outcome": "All actions and inferences remain traceable in the chat ledger."},
        {"principle": "Deliver structured output when actionable.", "outcome": "Ensures adaptive, self-evolving user experience."}
      ]
    },
    "updateNotes": {
      "icon": "gear",
      "format": "text",
      "text": "As of v5.3.4-DRY, all AI Integration logic operates declaratively through the unified SSE Stream and Temporal Doctrine Suite. Procedural resolvers and redundant schema entries were retired under Parliamentarian Directive CPD-03.C."
    },
    "tags": ["semantic-router", "contextual-ai", "skyebot-core", "ai-integration", "codex-architecture"],
    "version": "5.3.4-DRY",
    "updated": "2025-10-29"
  },
  "sseStream": {
  "title": "üåê SSE Stream",
  "category": "Adaptive Layer",
  "type": "data-stream",
  "subtypes": ["live-feed", "system-pulse", "context-stream"],
  "actions": ["observe", "generate-sheet", "sync", "describe"],
  "relationships": {
    "isA": "adaptiveModule",
    "partOf": "Adaptive Layer",
    "governs": ["aiIntegration", "chatHistoryArchitecture"],
    "aliases": ["Server-Sent Events", "Skyesoft Stream", "SSE Feed"]
  },
  "enrichment": "light",
  "purpose": {
    "icon": "target",
    "format": "text",
    "text": "Provides real-time state data including time, weather, and system status. Acts as the live operational pulse of the Skyesoft system."
  },
  "tiers": [
    {
      "name": "live-feed",
      "interval": "1s",
      "members": ["timeDateArray", "intervalsArray", "recordCounts", "kpiData"]
    },
    {
      "name": "system-pulse",
      "interval": "5s",
      "members": ["siteMeta", "deploymentCheck"]
    },
    {
      "name": "context-stream",
      "interval": "10s",
      "members": ["weatherData", "codex", "announcements"]
    }
  ],
  "examples": {
    "icon": "table",
    "format": "table",
    "items": [
      { "Stream": "timeDateArray", "Purpose": "Real-time work interval tracking" },
      { "Stream": "weatherData", "Purpose": "Dynamic weather injection for context" },
      { "Stream": "siteMeta", "Purpose": "Deployment and Netlify sync data" }
    ]
  },
  "integrationNotes": {
    "icon": "link",
    "format": "text",
    "text": "The SSE Stream now subsumes the Skyesoft Codex as a live data object. This unification makes the stream the single source of truth for both operational telemetry and organizational logic. All semantic resolution, including Codex module discovery, now occurs directly within the SSE context without secondary loaders."
  }
  },
  "ragFramework": {
    "title": "üìö RAG Framework",
    "category": "Adaptive Layer",
    "enrichment": "medium",
    "purpose": {
      "icon": "book",
      "format": "text",
      "text": "Defines Skyesoft‚Äôs Retrieval-Augmented Generation layer, connecting Codex content, archived reports, and live data into a reasoning network."
    },
    "features": {
      "icon": "gear",
      "format": "list",
      "items": [
        "Codex-aware retrieval queries",
        "Cross-reference between modules and SSE streams",
        "Context summarization for AI agents"
      ]
    },
    "integrationPoints": {
      "icon": "link",
      "format": "list",
      "items": [
        "semanticResponder",
        "codex",
        "sseStream"
      ]
    }
  },
  "semanticResponder": {
    "title": "üß≠ Semantic Responder",
    "category": "Adaptive Layer",
    "enrichment": "medium",
    "description": "Defines Skyebot‚Äôs core reasoning system ‚Äî interpreting natural language semantically to match user intent to Codex modules, SSE data, and CRUD operations without strict keyword dependence.",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Defines Skyebot‚Äôs core reasoning system ‚Äî interpreting natural language semantically to match user intent to Codex modules, SSE data, and CRUD operations without strict keyword dependence."
    },
    "architecture": {
      "icon": "diagram",
      "format": "list",
      "items": [
        "Receives user input and contextual data from the SSE stream.",
        "Builds a semantic index from Codex modules (titles, purposes, actions, subtypes, aliases).",
        "Invokes the LLM Router to infer {intent, target, confidence} from natural language.",
        "If confidence is low, performs token-based semantic fallback (no regex).",
        "Determines intent type (summary, report, crud, general) using Codex actions and subtypes.",
        "Routes intent to execution layer: text summarizer, report generator, or CRUD engine.",
        "Logs all reasoning decisions and results for traceability.",
        "Maintains full alignment with the AI Integration and RAG Framework layers."
      ]
    },
    "principles": {
      "icon": "compass",
      "format": "list",
      "items": [
        "Interpret meaning over syntax ‚Äî understand what is said, not just how it‚Äôs said.",
        "Use Codex and SSE data as the only sources of truth.",
        "Leverage LLM reasoning to enrich semantic inference while remaining grounded.",
        "Prefer structure when intent is actionable, conversation when exploratory.",
        "Ensure all reasoning is auditable via the Chat History Architecture."
      ]
    },
    "outcomes": {
      "icon": "star",
      "format": "list",
      "items": [
        "Skyebot distinguishes between descriptive and actionable requests.",
        "Regex-free natural understanding of user language.",
        "Unified decision-making between Codex, SSE, and LLM reasoning layers.",
        "Consistent audit logs and confidence scoring for every interpretation."
      ]
    },
    "integrationRevision": {
      "icon": "compass",
      "format": "text",
      "text": "Semantic Responder now treats the SSE Stream as a total semantic field. Every key‚ÄîtimeDateArray, weatherData, codexMeta, or module definition‚Äîis discoverable through the same resolver function. This removes hardcoded category checks and enforces DRY semantic inference across all live data."
    }
  },
  "chatHistoryArchitecture": {
    "title": "üíæ Chat History Architecture",
    "category": "System Layer",
    "enrichment": "high",
    "purpose": {
      "icon": "target",
      "format": "text",
      "text": "Defines how Skyebot‚Ñ¢ records, recalls, and reasons from prior exchanges. Each message or action is stored as an immutable, timestamped ledger entry, enabling Skyebot to maintain continuity, avoid redundancy, and extrapolate intent based on historical context."
    },
    "structure": {
      "icon": "table",
      "format": "table",
      "items": [
        { "Field": "messageId", "Type": "String", "Description": "Composite of session start time (UNIX) + increment (e.g., 1739432447_4)" },
        { "Field": "timestamp", "Type": "Integer", "Description": "UNIX time of event for fast sorting and cross-reference" },
        { "Field": "userId", "Type": "Integer", "Description": "Identifies the actor; 0 = Skyebot‚Ñ¢, >0 = Human user, -1 = Anonymous" },
        { "Field": "message", "Type": "String", "Description": "User input or Skyebot response text" },
        { "Field": "attachments", "Type": "Array", "Description": "Optional list of attached file objects or paths" },
        { "Field": "metadata", "Type": "Object", "Description": "Includes IP address, CRUD action key, project, target, and system tags" },
        { "Field": "index", "Type": "Object", "Description": "Lightweight subset for fast lookups by action, target, or project" }
      ]
    },
    "metadataModel": {
      "icon": "gear",
      "format": "list",
      "items": [
        "IP address recorded for traceability and audit",
        "CRUD action logged from actions.json reference table",
        "System actions such as login and session start treated as Create-type events",
        "Indexed metadata enables Skyebot to recall and compare recent actions (e.g., detect if an email or report has already been sent)"
      ]
    },
    "integrationPoints": {
      "icon": "link",
      "format": "list",
      "items": [
        "CRUD User Interface Convention ‚Äî aligns user actions with audit trail entries",
        "File Management ‚Äî manages persistence under /api/data/chat_history/",
        "Skyebot Module ‚Äî appends and analyzes events for recall and continuity",
        "Action Recall & Extrapolation ‚Äî prevents redundant execution and allows intelligent inference of follow-up tasks"
      ]
    },
    "principles": {
      "icon": "shield",
      "format": "list",
      "items": [
        "Append-only structure for audit integrity",
        "Human-readable JSON with atomic writes",
        "Chronological order preserved via UNIX timestamps",
        "Session files indexed monthly for scalability",
        "Short-term context used for reasoning; long-term ledger retained for analytics and provenance"
      ]
    },
    "extrapolationLogic": {
      "icon": "brain",
      "format": "list",
      "items": [
        "Skyebot queries recent history before executing Create actions to prevent duplication (e.g., repeated emails or reports)",
        "Pattern matching based on metadata.target and metadata.project identifies related prior actions",
        "Temporal cutoff (default 24 hours) used to define 'recent' actions for recall",
        "When ambiguity is detected, Skyebot prompts with options instead of acting blindly"
      ]
    },
    "example": {
      "icon": "code",
      "format": "text",
      "text": "{\n  \"messageId\": \"1739432447_4\",\n  \"timestamp\": 1739432489,\n  \"userId\": 1,\n  \"message\": \"Send zoning report to Paula.\",\n  \"attachments\": [],\n  \"metadata\": {\n    \"ip\": \"73.10.24.120\",\n    \"action\": \"create_email\",\n    \"crud\": \"C\",\n    \"target\": \"Paula Leonard\",\n    \"project\": \"Mesa Zoning\"\n  },\n  \"index\": { \"action\": \"create_email\", \"target\": \"Paula Leonard\", \"project\": \"Mesa Zoning\" }\n}"
    }
  },
  "codeManagement": {
  "title": "üíª Code Management",
  "category": "System Layer",
  "type": "system-standard",
  "subtypes": ["source", "module", "endpoint"],
  "actions": ["read", "describe", "suggest-edit", "generate-docs"],
  "relationships": {
    "isA": "systemStandard",
    "partOf": "System Layer",
    "dependsOn": ["fileManagement"],
    "governs": ["getCodeFile", "generateReports", "federalHolidays", "getDynamicData"],
    "aliases": ["code index", "developer layer", "Skyebot coding interface"]
  },
  "enrichment": "medium",
  "purpose": {
    "icon": "target",
    "format": "text",
    "text": "Defines how Skyebot‚Ñ¢ interacts with Skyesoft‚Äôs source files ‚Äî allowing safe read-only inspection, structured documentation, and controlled modification suggestions. It ensures AI access remains auditable, non-destructive, and version-controlled."
  },
  "features": {
    "icon": "gear",
    "format": "list",
    "items": [
      "Central code manifest with file paths and descriptions",
      "Read-only inspection by default with diff-based editing proposals",
      "Integration with version control for commit history awareness",
      "AI documentation generator aligned with Codex formatting"
    ]
  },
  "integrations": {
    "icon": "link",
    "format": "list",
    "items": [
      "File Management ‚Äî ensures path integrity and backup safety",
      "SSE Stream ‚Äî provides live deployment sync metadata",
      "AI Integration ‚Äî enables semantic file comprehension and code commentary",
      "Chat History Architecture ‚Äî logs all code interactions for auditability"
    ]
  },
  "rules": {
    "icon": "shield",
    "format": "list",
    "items": [
      "Skyebot may read any file under /api, /assets, or /scripts but never /config or private credentials.",
      "All modifications must be confirmed by a human before commit.",
      "Changes are stored as diffs under /docs/changes/ for traceability.",
      "Each access is logged with timestamp, file, and user ID."
    ]
  },
  "examples": {
    "icon": "table",
    "format": "table",
    "items": [
      { "File": "api/getDynamicData.php", "Purpose": "Generates the Skyesoft SSE stream" },
      { "File": "api/federalHolidays.php", "Purpose": "Returns normalized holiday data" },
      { "File": "api/generateReports.php", "Purpose": "Creates PDF/HTML information sheets" }
    ]
  }
  },
  "modules": {
    "skyesoftGlossary": {
      "title": "üìò Skyesoft Glossary",
      "category": "System Layer",
      "description": "Defines internal shorthand and operational slang used across Skyesoft projects, emphasizing clarity, rhythm, and efficiency in team communication.",
      "purpose": {
        "icon": "book",
        "format": "text",
        "text": "To unify Skyesoft‚Äôs internal terminology ‚Äî blending technical accuracy with cultural rhythm ‚Äî so that AI, developers, and staff speak the same language."
      },
      "data": {
        "icon": "sparkle",
        "format": "table",
        "content": {
          "SNPS": "Salt N' Pepa Style ‚Äî Save it, commit it, push it ‚Äî clean and confident. The rhythm of progress. üíæ‚û°Ô∏èüöÄ",
          "AIW": "All-In-Wonder ‚Äî a one-cut command that moves, renames, and runs. Fast hands, no hesitation. ‚ö°",
          "TC": "Terminal Command ‚Äî raw execution from the shell. You type, it happens. üîß",
          "TCL": "Terminal Command Line ‚Äî the full chain, from setup to commit, meant to flow as one move. ‚õìÔ∏è",
          "LGBAS": "Let's Go Back A Step ‚Äî the tactical rewind. Step back, recalibrate, then hit again. üîÅ",
          "MTCO": "Measure Twice, Cut Once ‚Äî the precision creed. Think deep, act once. üéØ",
          "SOT": "Source of Truth ‚Äî the file of record, the clean state. All flows return here. üìú",
          "SSE": "Server-Sent Events ‚Äî the pulse of the system. Time, weather, KPIs, all alive. üåê",
          "Codex": "The master playbook ‚Äî Skyesoft‚Äôs internal library of logic, rhythm, and reason. üìö",
          "PushIt": "Execute the cycle ‚Äî save, commit, push, verify. A clean push is the heartbeat of progress. ‚ù§Ô∏è"
        }
      },
      "features": {
        "icon": "list",
        "format": "auto",
        "source": "data.content"
      }
    }
  },
  "apiMap": {
    "base": "https://www.skyelighting.com/skyesoft/",
    "openai": "https://api.openai.com/v1/",
    "openWeather": "https://api.openweathermap.org/data/2.5/"
  },
  "weatherData": {
    "title": "üå§Ô∏è Weather Data Defaults",
    "category": "System Layer",
    "defaultLocation": "Phoenix,US",
    "latitude": "33.448376",
    "longitude": "-112.074036"
  },
  "kpiData": {
    "secondsPerDay": 86400,
    "daysPerYearBase": 365,
    "morningEndHour": 12,
    "afternoonEndHour": 17,
    "defaultTimeout": 10,
    "openaiMaxTokens": 1500,
    "httpOk": 200,
    "minConfidence": 70,
    "cacheTtlSeconds": 300,
    "pdfMargins": {
      "header": 80,
      "body": 50,
      "footer": 25
    }
  },
  "ontology": {
    "envFormatRule": true,
    "envKeys": [
      "OPENAI_API_KEY",
      "WEATHER_API_KEY",
      "BASE_DATA_PATH",
      "CODEX_PATH",
      "ENV_PATH"
    ]
  }
}